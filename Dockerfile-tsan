FROM ubuntu:jammy

RUN apt update
RUN apt install -y g++-12 gcc-12 build-essential cmake pkg-config git wget ninja-build nano libzip-dev

RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 60
RUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 60
RUN update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-12 60

# Run all downloads first to be able to use Docker's layers as cache and prevent excessive redownloads

WORKDIR /opt
RUN wget https://github.com/redis/hiredis/archive/refs/tags/v1.2.0.tar.gz
RUN wget https://boostorg.jfrog.io/artifactory/main/release/1.81.0/source/boost_1_81_0.tar.bz2
RUN wget https://www.openssl.org/source/openssl-3.0.11.tar.gz

ENV CFLAGS="-Og -fsanitize=thread"
ENV CXXFLAGS="-Og -fsanitize=thread"
ENV LDFLAGS="-fsanitize=thread -static-libtsan -static-libgcc -static-libstdc++"

RUN tar xf openssl-3.0.11.tar.gz
WORKDIR /opt/openssl-3.0.11
RUN ./Configure --prefix=/usr --openssldir=/etc/ssl --libdir=lib no-shared
RUN make -j
RUN make -j install

WORKDIR /opt

#Build boost with support for asan
RUN tar xf boost_1_81_0.tar.bz2

WORKDIR /opt/boost_1_81_0

RUN <<EOF
cat >> patch << EOR
diff -r -u boost-1.81.0/boost/asio/detail/std_fenced_block.hpp boost-1.81.0-fencecd/boost/asio/detail/std_fenced_block.hpp
--- ./boost/asio/detail/std_fenced_block.hpp	2022-12-14 16:15:35.000000000 +0100
+++ ./boost/asio/detail/std_fenced_block.hpp	2023-10-03 20:17:11.701435674 +0200
@@ -43,14 +43,16 @@
   // Constructor for a full fenced block.
   explicit std_fenced_block(full_t)
   {
-    std::atomic_thread_fence(std::memory_order_acquire);
+    _fence.load(std::memory_order_acquire);
   }

   // Destructor.
   ~std_fenced_block()
   {
-    std::atomic_thread_fence(std::memory_order_release);
+    _fence.store(true, std::memory_order_release);
   }
+
+  std::atomic<bool> _fence;
 };

 } // namespace detail
EOR
EOF
RUN patch ./boost/asio/detail/std_fenced_block.hpp < patch

RUN ./bootstrap.sh --prefix=/usr
RUN ./b2 cxxflags="-fsanitize=thread -Og -std=c++17 -DBOOST_USE_TSAN"  linkflags="-static-libtsan -static-libgcc -static-libstdc++" variant=debug link=static threading=multi
RUN ./b2 cxxflags="-fsanitize=thread -Og -std=c++17 -DBOOST_USE_TSAN"  linkflags="-static-libtsan -static-libgcc -static-libstdc++" variant=debug link=static threading=multi install

WORKDIR /opt

#Build latest hiredis containing sdevent support, not available yet in apt
RUN tar xf v1.2.0.tar.gz
RUN mkdir /opt/hiredis-1.2.0/build

WORKDIR /opt/hiredis-1.2.0/build
RUN cmake -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DDISABLE_TESTS=1 -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_SSL=1 ..
RUN ninja && ninja install

RUN mkdir -p /opt/ichor/build

WORKDIR /opt/ichor/build

RUN unset CFLAGS
RUN unset CXXFLAGS
RUN unset LDFLAGS

ENTRYPOINT ["/bin/bash", "-c"]

CMD ["cd /opt/ichor/build && cmake -GNinja -DCMAKE_BUILD_TYPE=Debug -DICHOR_USE_SANITIZERS=0 -DICHOR_USE_THREAD_SANITIZER=1 -DICHOR_USE_HIREDIS=1 -DICHOR_USE_BOOST_BEAST=1 -DICHOR_USE_SPDLOG=1 -DICHOR_USE_BACKWARD=0 -DICHOR_SKIP_EXTERNAL_TESTS=1 /opt/ichor/src && ninja && ninja test"]
