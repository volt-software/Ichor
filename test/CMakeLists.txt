include(CTest)
include(Catch)

option(ICHOR_SKIP_EXTERNAL_TESTS "When running tests in containers, etcd and redis aren't running. This option skips those." OFF)

file(GLOB_RECURSE PROJECT_TEST_SOURCES ${ICHOR_TOP_DIR}/test/*.cpp)
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-maybe-uninitialized ") # Catch2 has something that triggers gcc.
endif()

foreach(filename ${PROJECT_TEST_SOURCES})
    get_filename_component(testname ${filename} NAME_WE)

    if(WIN32 AND (${testname} STREQUAL "TcpTests"))
        continue()
    endif()

    add_executable(${testname} ${filename})
    target_link_libraries(${testname} ${CMAKE_THREAD_LIBS_INIT})
    target_link_libraries(${testname} ichor)
    target_link_libraries(${testname} Catch2::Catch2WithMain)
    target_compile_definitions(${testname} PUBLIC CATCH_CONFIG_FAST_COMPILE)

    # We want to build them, but not run/discover them.
    if(ICHOR_SKIP_EXTERNAL_TESTS AND (${testname} STREQUAL "EtcdTests" OR ${testname} STREQUAL "RedisTests"))
        continue()
    endif()
    if(ICHOR_SKIP_EXTERNAL_TESTS)
        target_compile_definitions(${testname} PUBLIC ICHOR_SKIP_EXTERNAL_TESTS)
    endif()
    if(ICHOR_USE_LIBURING AND NOT WIN32 AND NOT APPLE AND NOT (ICHOR_SKIP_EXTERNAL_TESTS AND ICHOR_AARCH64))
        if(${testname} STREQUAL "TcpTests" OR ${testname} STREQUAL "AsyncFileIOTests" OR ${testname} STREQUAL "ServicesTests")
            add_executable(${testname}_uring ${filename})
            target_link_libraries(${testname}_uring ${CMAKE_THREAD_LIBS_INIT})
            target_link_libraries(${testname}_uring ichor)
            target_link_libraries(${testname}_uring Catch2::Catch2WithMain)
            target_compile_definitions(${testname}_uring PUBLIC CATCH_CONFIG_FAST_COMPILE TEST_URING)
            catch_discover_tests(${testname}_uring)
        endif()
    endif()
    if(${testname} STREQUAL "ServicesTests")
        add_executable(${testname}_ordered ${filename})
        target_link_libraries(${testname}_ordered ${CMAKE_THREAD_LIBS_INIT})
        target_link_libraries(${testname}_ordered ichor)
        target_link_libraries(${testname}_ordered Catch2::Catch2WithMain)
        target_compile_definitions(${testname}_ordered PUBLIC CATCH_CONFIG_FAST_COMPILE TEST_ORDERED)
        catch_discover_tests(${testname}_ordered)
    endif()

    catch_discover_tests(${testname})
endforeach()
